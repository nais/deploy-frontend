name: Build and deploy nais-deploy-frontend

on: [push, pull_request]

env:
  BASE_IMAGE: ghcr.io/${{ github.repository }}/deploy-frontend

jobs:
  test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Download dependencies
        run: yarn install --frozen-lockfile
      - name: Run tests
        run: yarn test
      - name: Build
        run: yarn build

  build-image:
    name: Build and publish Docker
    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # Use commit-sha1 instead of tag for security concerns
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.BASE_IMAGE }}
          tags: |
            type=raw,value={{date 'YYYYMMDDhhmmss'}}-{{sha}}
            type=raw,value=latest
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.ref == 'refs/heads/master' }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
    outputs:
      image: "${{ fromJSON(steps.metadata.outputs.json).tags[0] }}"

  deploy-dev:
    name: Deploy to dev-gcp
    needs:
      - test
      - build-image
    runs-on: ubuntu-latest
    # soft-disable deployments to dev-gcp for now. just delete the following line to enable it again
    if: ${{ github.ref == 'refs/heads/dev-gcp' }}
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: .nais/naiserator.yml
          VARS: .nais/dev-config.json
          VAR: "image=${{ needs.build-image.outputs.image }}"

  deploy-ci:
    name: Deploy to ci-gcp
    needs:
      - test
      - build-image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY_CI }}
          CLUSTER: ci-gcp
          RESOURCE: .nais/naiserator.yml
          VARS: .nais/ci-config.json
          DEPLOY_SERVER: deploy.ci.nav.no:443
          VAR: "image=${{ needs.build-image.outputs.image }}"

  deploy-prod:
    name: Deploy to prod-gcp
    needs:
      - test
      - build-image
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: .nais/naiserator.yml
          VARS: .nais/prod-config.json
          VAR: "image=${{ needs.build-image.outputs.image }}"
