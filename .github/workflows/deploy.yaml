name: Build and deploy nais-deploy-frontend
on: [push, pull_request]
env:
  BASE_IMAGE: ghcr.io/${{ github.repository }}/deploy-frontend
jobs:
  test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@1f8c6b94b26d0feae1e387ca63ccbdc44d27b561 # ratchet:actions/setup-node@v2
        with:
          node-version: '16.x'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache@69d9d449aced6a2ede0bc19182fadc3a0a42d2b0 # ratchet:actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Download dependencies
        run: yarn install --frozen-lockfile
      - name: Run tests
        run: yarn test
      - name: Build
        run: yarn build
  build-image:
    name: Build and publish Docker
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3
      - name: Install cosign
        uses: sigstore/cosign-installer@c3667d99424e7e6047999fb6246c0da843953c65 # ratchet:sigstore/cosign-installer@main
        with:
          cosign-release: 'v2.0.0'
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d" # ratchet:google-github-actions/auth@v1.0.0
        with:
          workload_identity_provider: ${{ secrets.NAIS_IO_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: "gh-deploy-frontend@nais-io.iam.gserviceaccount.com"
          token_format: "access_token"
      - name: Login to registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # ratchet:docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
      - name: Docker meta
        id: metadata
        uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96 # ratchet:docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image }}
          tags: |
            type=raw,value={{date 'YYYYMMDDhhmmss'}}-{{sha}}
            type=raw,value=latest
      - name: Build and push
        id: build_push
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # ratchet:docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.${{ matrix.image }}
          push: ${{ github.actor != 'dependabot[bot]' }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
      - name: Save image_ref to env
        run: echo "image_ref=${{ env.REGISTRY }}/${{ matrix.image }}@${{ steps.build_push.outputs.digest }}" >> $GITHUB_ENV
      - name: Sign image
        run: cosign sign --yes "${{ env.image_ref }}"
      - name: Create SBOM
        uses: aquasecurity/trivy-action@8bd2f9fbda2109502356ff8a6a89da55b1ead252 # ratchet:aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          format: 'cyclonedx'
          output: 'cyclone.sbom.json'
          image-ref: "${{ env.image_ref }}"
      - name: Attest image
        run: |
          cosign attest --yes --predicate cyclone.sbom.json --type cyclonedx "${{ env.image_ref }}"
    outputs:
      image: '${{ fromJSON(steps.metadata.outputs.json).tags[0] }}'
      version: "${{ fromJSON(steps.metadata.outputs.json).labels['org.opencontainers.image.version'] }}"
  rollout:
    name: Rollout with Fasit
    if: github.ref == 'refs/heads/master'
    needs:
      - test
      - build-image
    permissions:
      id-token: write
    runs-on: fasit-deploy
    steps:
      - uses: nais/fasit-deploy@b2c0b6d049b53bef41b321eec406fe66938576fd # ratchet:nais/fasit-deploy@main
        name: Rollout hookd-frontend
        with:
          json: '{"frontend": {"image": {"tag": "${{ needs.build-image.outputs.version }}"}}}'
          feature_name: hookd
